# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n6pRp59ILW28r0YCR0YN8jEPkjeltbFq

**Medical Cost Prediction**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
# %matplotlib inline
import matplotlib 
import seaborn as sns
matplotlib.rcParams["figure.figsize"] = (10,6)

data1=pd.read_csv("/content/insurance.csv")
data1.head()

data1.shape

data1.columns

data1['smoker'].unique()

data1['region'].unique()

data1['sex'].unique()

data1['children'].value_counts()

data1['region'].value_counts()

data1['charges'].unique()

"""**Data Cleaning (handling null values and duplicate values)**"""

data1.isnull().sum()

data1.duplicated().sum()

data1 = data1.drop_duplicates()
data1.duplicated().sum()

"""**Data Visualization**"""

data1.age.plot(kind='hist')

plt.figure(figsize = (10,6))
fig = sns.countplot(x="smoker",data=data1)
fig.set_title("Smokers and Non-Smokers", fontsize=15)
fig.set_xlabel("smoker", fontsize=10)
fig.set_ylabel("count", fontsize=10)

plt.figure(figsize = (10,6))
fig = sns.countplot(x="sex",data=data1)
fig.set_title("Female and Male", fontsize=15)
fig.set_xlabel("Gender", fontsize=10)
fig.set_ylabel("count", fontsize=10)

plt.figure(figsize = (10,6))
data1.charges.plot(kind='hist')

data1.bmi.plot(kind="hist")

data1.children.plot(kind="hist")

sns.heatmap(data1.corr(),annot=True)

"""**Using one hot encoding**"""

dummy1=pd.get_dummies(data1.sex)
dummy1.head()

dummy2=pd.get_dummies(data1.region)
dummy2.head()

dummy3=pd.get_dummies(data1.smoker)
dummy3.head()

data2=pd.concat([data1,dummy1],axis='columns')
data2.drop('sex',axis='columns', inplace=True)
data2.head()

data3=pd.concat([data2,dummy2],axis='columns')
data3.drop('region',axis='columns', inplace=True)
data3.head()

data4=pd.concat([data3,dummy3],axis='columns')
data4.drop('smoker',axis='columns', inplace=True)
data4.head()

"""**Outliers handling**

Since, children and charges correlation is very less we can remove this column.
"""

data4.drop('children',axis='columns',inplace=True)
data4.head()

data4[data4.bmi>=47].bmi.count()

"""We can renove the rows having bmi values>=47, since very few"""

data5=data4[data4.bmi<47]
data5.shape

data5[data5.charges>=50000].charges.count()

"""Since frequency of charges>50000 is very less we can also remove them."""

data6=data5[data5.charges<50000]
data6.shape

sns.heatmap(data6.corr(),annot=True)

sns.scatterplot(data=data6,x='age',y='charges')

sns.scatterplot(data=data6,x='bmi',y='charges')

"""Now are data is ready for prediction

**Linear Regression**
"""

X=data6.drop('charges',axis='columns')
X.head()

Y=data6['charges']
Y.head()

print(X.shape)
print(len(Y))

"""Splitting dataset into traing and testing"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,Y,test_size=0.2,random_state=10)

"""Fitting into Linear regression"""

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

"""Predicting result"""

y_pred=regressor.predict(X_test)
y_pred

"""Calculating scores of our model"""

from sklearn.metrics import r2_score
r2_score(y_test,y_pred)

"""**Exporting the model to a picle file**"""

import pickle
with open('medical_cost_prediction_model.pickle','wb') as f:
    pickle.dump(regressor,f)